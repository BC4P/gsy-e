[
  "tests/test_appliances.py::test_fridge_appliance_door",
  "tests/test_appliances.py::test_fridge_appliance_report_energy_surplus",
  "tests/test_appliances.py::test_fridge_appliance_report_energy_balanced",
  "tests/test_appliances.py::test_fridge_appliance_heats_up_when_open",
  "tests/test_appliances.py::test_fridge_appliance_report_energy_too_warm",
  "tests/test_appliances.py::test_switchable_appliance_switching",
  "tests/test_appliances.py::test_switchable_appliance_reports_when_on",
  "tests/test_appliances.py::test_switchable_appliance_no_report_when_off",
  "tests/test_appliances.py::test_pv_appliance_cloud_cover",
  "tests/test_appliances.py::test_custom_profile_appliance_lacking_energy_warning",
  "tests/test_area.py::TestAreaClass::test_cycle_markets",
  "tests/test_area.py::TestAreaClass::test_market_with_most_expensive_offer",
  "tests/test_area.py::TestAreaClass::test_markets_are_cycled_according_to_market_count",
  "tests/test_area_serializer.py::test_area_with_children_roundtrip",
  "tests/test_area_serializer.py::test_encode_strategy_appliance",
  "tests/test_area_serializer.py::test_strategy_appliance_roundtrip",
  "tests/test_area_serializer.py::test_raises_unknown_class",
  "tests/test_area_serializer.py::test_strategy_roundtrip_with_params",
  "tests/test_area_serializer.py::test_non_attr_param",
  "tests/test_area_serializer.py::test_appliance",
  "tests/test_area_serializer.py::test_appliance_roundtrip",
  "tests/test_area_serializer.py::test_leaf_deserialization",
  "tests/test_area_serializer.py::test_leaf_serialization",
  "tests/test_area_serializer.py::test_roundtrip_with_leaf",
  "tests/test_area_serializer.py::test_budget_keeper",
  "tests/test_area_serializer.py::test_budget_keeper_roundtrip",
  "tests/test_balancing_agent.py::test_baa_event_trade",
  "tests/test_balancing_agent.py::test_baa_unmatched_event_trade",
  "tests/test_bid.py::test_offer_id_stringified",
  "tests/test_bid.py::test_offer_market",
  "tests/test_budget_keeper.py::test_budget_keeper_decide",
  "tests/test_budget_keeper.py::test_budget_keeper_compute_remaining",
  "tests/test_budget_keeper.py::test_budget_keeper_update_forecast",
  "tests/test_budget_keeper.py::test_budget_keeper_disables_high_consumer",
  "tests/test_budget_keeper.py::test_budget_keeper_does_not_disable_other_consumers",
  "tests/test_inter_area_agent.py::test_iaa_forwards_offers",
  "tests/test_inter_area_agent.py::test_iaa_forwarded_offers_complied_to_transfer_fee_percentage",
  "tests/test_inter_area_agent.py::test_iaa_event_trade_deletes_forwarded_offer_when_sold",
  "tests/test_inter_area_agent.py::test_iaa_forwards_bids",
  "tests/test_inter_area_agent.py::test_iaa_does_not_forward_bids_if_the_IAA_name_is_the_same_as_the_target_market",
  "tests/test_inter_area_agent.py::test_iaa_forwarded_bids_adhere_to_iaa_overhead",
  "tests/test_inter_area_agent.py::test_iaa_forwards_offers_according_to_percentage[10]",
  "tests/test_inter_area_agent.py::test_iaa_forwards_offers_according_to_percentage[0]",
  "tests/test_inter_area_agent.py::test_iaa_forwards_offers_according_to_percentage[50]",
  "tests/test_inter_area_agent.py::test_iaa_forwards_offers_according_to_percentage[75]",
  "tests/test_inter_area_agent.py::test_iaa_forwards_offers_according_to_percentage[5]",
  "tests/test_inter_area_agent.py::test_iaa_forwards_offers_according_to_percentage[2]",
  "tests/test_inter_area_agent.py::test_iaa_forwards_offers_according_to_percentage[3]",
  "tests/test_inter_area_agent.py::test_iaa_event_trade_bid_deletes_forwarded_bid_when_sold",
  "tests/test_inter_area_agent.py::test_iaa_event_trade_bid_does_not_delete_forwarded_bid_of_counterpart",
  "tests/test_inter_area_agent.py::test_iaa_event_trade_bid_does_not_update_forwarded_bids_on_partial[True]",
  "tests/test_inter_area_agent.py::test_iaa_event_trade_bid_does_not_update_forwarded_bids_on_partial[False]",
  "tests/test_inter_area_agent.py::test_iaa_event_trade_buys_accepted_offer",
  "tests/test_inter_area_agent.py::test_iaa_event_trade_buys_accepted_bid",
  "tests/test_inter_area_agent.py::test_iaa_event_bid_trade_reduces_bid_price",
  "tests/test_inter_area_agent.py::test_iaa_event_trade_buys_partial_accepted_offer",
  "tests/test_inter_area_agent.py::test_iaa_event_trade_buys_partial_accepted_bid",
  "tests/test_inter_area_agent.py::test_iaa_forwards_partial_offer_from_source_market",
  "tests/test_inter_area_agent.py::test_iaa_double_sided_performs_pay_as_bid_matching",
  "tests/test_inter_area_agent.py::test_iaa_double_sided_match_offer_bids",
  "tests/test_inter_area_agent.py::test_iaa_event_trade_forwards_residual_offer",
  "tests/test_leaves.py::test_fridge_leaf",
  "tests/test_leaves.py::test_fridge_leaf_default_risk",
  "tests/test_leaves.py::test_commercial_producer_leaf",
  "tests/test_leaves.py::test_leaf_parameters",
  "tests/test_market.py::TestMarketIOU::runTest",
  "tests/test_market.py::test_device_registry",
  "tests/test_market.py::test_market_offer[market0-offer]",
  "tests/test_market.py::test_market_offer[market1-balancing_offer]",
  "tests/test_market.py::test_market_bid",
  "tests/test_market.py::test_market_bid_accepts_bid_id",
  "tests/test_market.py::test_market_offer_invalid",
  "tests/test_market.py::test_market_bid_invalid",
  "tests/test_market.py::test_market_offer_readonly[market0-offer]",
  "tests/test_market.py::test_market_offer_readonly[market1-balancing_offer]",
  "tests/test_market.py::test_market_offer_delete[market0-offer]",
  "tests/test_market.py::test_market_offer_delete[market1-balancing_offer]",
  "tests/test_market.py::test_market_offer_delete_missing[market0]",
  "tests/test_market.py::test_market_offer_delete_missing[market1]",
  "tests/test_market.py::test_market_offer_delete_readonly[market0]",
  "tests/test_market.py::test_market_offer_delete_readonly[market1]",
  "tests/test_market.py::test_market_bid_delete",
  "tests/test_market.py::test_market_bid_delete_id",
  "tests/test_market.py::test_market_bid_delete_missing",
  "tests/test_market.py::test_market_trade[market0-offer-accept_offer]",
  "tests/test_market.py::test_market_trade[market1-balancing_offer-accept_offer]",
  "tests/test_market.py::test_balancing_market_negative_offer_trade",
  "tests/test_market.py::test_market_bid_trade",
  "tests/test_market.py::test_market_trade_by_id[market0-offer-accept_offer]",
  "tests/test_market.py::test_market_trade_by_id[market1-balancing_offer-accept_offer]",
  "tests/test_market.py::test_market_trade_readonly[market0-offer-accept_offer]",
  "tests/test_market.py::test_market_trade_readonly[market1-balancing_offer-accept_offer]",
  "tests/test_market.py::test_market_trade_not_found[market0-offer-accept_offer]",
  "tests/test_market.py::test_market_trade_not_found[market1-balancing_offer-accept_offer]",
  "tests/test_market.py::test_market_trade_bid_not_found",
  "tests/test_market.py::test_market_trade_partial[market0-offer-accept_offer]",
  "tests/test_market.py::test_market_trade_partial[market1-balancing_offer-accept_offer]",
  "tests/test_market.py::test_market_trade_bid_partial",
  "tests/test_market.py::test_market_accept_bid_emits_bid_traded_and_bid_deleted_event",
  "tests/test_market.py::test_market_accept_bid_does_not_emit_bid_deleted_on_partial_bid",
  "tests/test_market.py::test_market_accept_bid_always_updates_trade_stats[_update_accumulated_trade_price_energy]",
  "tests/test_market.py::test_market_accept_bid_always_updates_trade_stats[_update_min_max_avg_trade_prices]",
  "tests/test_market.py::test_market_trade_partial_invalid[market0-offer-accept_offer-0-InvalidTrade]",
  "tests/test_market.py::test_market_trade_partial_invalid[market1-offer-accept_offer-21-InvalidTrade]",
  "tests/test_market.py::test_market_trade_partial_invalid[market2-balancing_offer-accept_offer-0-InvalidBalancingTradeException]",
  "tests/test_market.py::test_market_trade_partial_invalid[market3-balancing_offer-accept_offer-21-InvalidBalancingTradeException]",
  "tests/test_market.py::test_market_trade_partial_bid_invalid[0]",
  "tests/test_market.py::test_market_trade_partial_bid_invalid[21]",
  "tests/test_market.py::test_market_trade_partial_bid_invalid[100]",
  "tests/test_market.py::test_market_trade_partial_bid_invalid[-20]",
  "tests/test_market.py::test_market_acct_simple",
  "tests/test_market.py::test_market_acct_multiple",
  "tests/test_market.py::test_market_avg_offer_price[market0-offer]",
  "tests/test_market.py::test_market_avg_offer_price[market1-balancing_offer]",
  "tests/test_market.py::test_market_avg_offer_price_empty[market0]",
  "tests/test_market.py::test_market_avg_offer_price_empty[market1]",
  "tests/test_market.py::test_market_sorted_offers[market0-offer]",
  "tests/test_market.py::test_market_sorted_offers[market1-balancing_offer]",
  "tests/test_market.py::test_market_most_affordable_offers[market0-offer]",
  "tests/test_market.py::test_market_most_affordable_offers[market1-balancing_offer]",
  "tests/test_market.py::test_market_listeners_init[Market-offer]",
  "tests/test_market.py::test_market_listeners_init[BalancingMarket-balancing_offer]",
  "tests/test_market.py::test_market_listeners_add[market0-offer-add_listener]",
  "tests/test_market.py::test_market_listeners_add[market1-balancing_offer-add_listener]",
  "tests/test_market.py::test_market_listeners_offer[market0-offer-add_listener-MarketEvent.OFFER]",
  "tests/test_market.py::test_market_listeners_offer[market1-balancing_offer-add_listener-MarketEvent.BALANCING_OFFER]",
  "tests/test_market.py::test_market_listeners_offer_changed[market0-offer-accept_offer-add_listener-MarketEvent.OFFER_CHANGED]",
  "tests/test_market.py::test_market_listeners_offer_changed[market1-balancing_offer-accept_offer-add_listener-MarketEvent.BALANCING_OFFER_CHANGED]",
  "tests/test_market.py::test_market_listeners_offer_deleted[market0-offer-delete_offer-add_listener-MarketEvent.OFFER_DELETED]",
  "tests/test_market.py::test_market_listeners_offer_deleted[market1-balancing_offer-delete_balancing_offer-add_listener-MarketEvent.BALANCING_OFFER_DELETED]",
  "tests/test_market.py::test_market_issuance_acct_reverse[20-10]",
  "tests/test_market.py::test_market_issuance_acct_reverse[30-0]",
  "tests/test_market.py::test_market_issuance_acct_reverse[40--10]",
  "tests/test_market.py::test_market_iou",
  "tests/test_market.py::test_market_accept_offer_yields_partial_trade[market0-offer-accept_offer]",
  "tests/test_market.py::test_market_accept_offer_yields_partial_trade[market1-balancing_offer-accept_offer]",
  "tests/test_market.py::test_market_accept_bid_yields_partial_bid_trade",
  "tests/test_offer.py::test_offer_id_stringified[Offer]",
  "tests/test_offer.py::test_offer_id_stringified[BalancingOffer]",
  "tests/test_offer.py::test_offer_market[Offer]",
  "tests/test_offer.py::test_offer_market[BalancingOffer]",
  "tests/test_offer.py::test_offer_listener_deleted[Offer]",
  "tests/test_offer.py::test_offer_listener_deleted[BalancingOffer]",
  "tests/test_offer.py::test_offer_listener_accepted[Offer]",
  "tests/test_offer.py::test_offer_listener_accepted[BalancingOffer]",
  "tests/test_offer.py::test_offer_listener_multiple[Offer]",
  "tests/test_offer.py::test_offer_listener_multiple[BalancingOffer]",
  "tests/test_settings_file.py::SampleTest::test_parse_settings_file",
  "tests/test_stats.py::test_recursive_current_markets",
  "tests/test_stats.py::test_total_avg_trade_price",
  "tests/test_stats.py::test_primary_unit_prices",
  "tests/test_stats.py::test_energy_bills",
  "tests/test_stats.py::test_energy_bills_finds_iaas",
  "tests/test_strategy_base.py::test_offers_open",
  "tests/test_strategy_base.py::test_offers_replace_open_offer",
  "tests/test_strategy_base.py::test_offers_does_not_replace_sold_offer",
  "tests/test_strategy_base.py::test_offers_in_market",
  "tests/test_strategy_base.py::test_offers_partial_offer",
  "tests/test_strategy_base.py::test_accept_offer",
  "tests/test_strategy_base.py::test_accept_partial_offer",
  "tests/test_strategy_base.py::test_accept_offer_handles_market_exception",
  "tests/test_strategy_base.py::test_accept_post_bid",
  "tests/test_strategy_base.py::test_remove_bid_from_pending",
  "tests/test_strategy_base.py::test_add_bid_to_bought",
  "tests/test_strategy_commercial_producer.py::testing_event_activate",
  "tests/test_strategy_commercial_producer.py::test_balancing_offers_are_not_sent_to_all_markets_if_device_not_in_registry",
  "tests/test_strategy_commercial_producer.py::test_balancing_offers_are_sent_to_all_markets_if_device_in_registry",
  "tests/test_strategy_commercial_producer.py::test_event_market_cycle_does_not_create_balancing_offer_if_not_in_registry",
  "tests/test_strategy_commercial_producer.py::test_event_market_cycle_creates_balancing_offer_on_last_market_if_in_registry",
  "tests/test_strategy_commercial_producer.py::test_event_trade",
  "tests/test_strategy_commercial_producer.py::test_on_offer_changed",
  "tests/test_strategy_commercial_producer.py::test_event_trade_after_offer_changed_partial_offer",
  "tests/test_strategy_commercial_producer.py::test_validate_posted_offers_get_updated_on_offer_energy_method",
  "tests/test_strategy_commercial_producer.py::testing_event_market_cycle",
  "tests/test_strategy_commercial_producer.py::test_commercial_producer_constructor_rejects_invalid_parameters",
  "tests/test_strategy_custom_profile.py::test_custom_profile_set_from_list",
  "tests/test_strategy_custom_profile.py::test_custom_profile_amount_over_period",
  "tests/test_strategy_custom_profile.py::test_custom_profile_amount_over_period_fractioned",
  "tests/test_strategy_custom_profile.py::test_irregular_times_power_at",
  "tests/test_strategy_custom_profile.py::test_irregular_times_amount_over_period",
  "tests/test_strategy_custom_profile.py::test_irregular_times_amount_over_period_early_end",
  "tests/test_strategy_custom_profile.py::test_irregular_times_amount_over_period_late_begin",
  "tests/test_strategy_custom_profile.py::test_read_from_csv",
  "tests/test_strategy_custom_profile.py::test_event_activate",
  "tests/test_strategy_custom_profile.py::test_buys_right_amount",
  "tests/test_strategy_custom_profile.py::test_buys_partial_offer",
  "tests/test_strategy_custom_profile.py::test_offers",
  "tests/test_strategy_e_car.py::test_car_arrival",
  "tests/test_strategy_e_car.py::test_car_not_arrived",
  "tests/test_strategy_e_car.py::test_car_depart",
  "tests/test_strategy_e_car.py::test_car_not_depart",
  "tests/test_strategy_e_car.py::test_ecar_unload",
  "tests/test_strategy_e_car.py::test_ecar_arrival",
  "tests/test_strategy_e_car.py::test_ecar_departure",
  "tests/test_strategy_e_car.py::test_ecar_market_cycle",
  "tests/test_strategy_e_car.py::test_ecar_constructor_rejects_invalid_parameters",
  "tests/test_strategy_e_car.py::test_ecar_constructor_handles_none_arrive_depart_values",
  "tests/test_strategy_fridge.py::test_if_fridge_accepts_valid_offer",
  "tests/test_strategy_fridge.py::test_if_fridge_cools_too_much",
  "tests/test_strategy_fridge.py::test_if_warm_fridge_buys",
  "tests/test_strategy_fridge.py::test_if_fridge_market_cycles",
  "tests/test_strategy_fridge.py::test_if_fridge_temperature_decreases_correct",
  "tests/test_strategy_fridge.py::test_offer_price_greater_than_threshold",
  "tests/test_strategy_fridge.py::test_no_offers_left",
  "tests/test_strategy_fridge.py::test_frigde_buys_partial_offer",
  "tests/test_strategy_fridge.py::test_heatpump_constructor_rejects_invalid_parameters",
  "tests/test_strategy_greedy_night_storage.py::test_find_avg_cheapest_offers1",
  "tests/test_strategy_greedy_night_storage.py::test_event_market_cycle",
  "tests/test_strategy_greedy_night_storage.py::test_event_trade",
  "tests/test_strategy_greedy_night_storage.py::test_energy_buying_possible",
  "tests/test_strategy_greedy_night_storage.py::test_sell_energy",
  "tests/test_strategy_greedy_night_storage.py::test_find_avg_cheapest_offers2",
  "tests/test_strategy_heatpump.py::test_event_tick",
  "tests/test_strategy_heatpump.py::test_heatpump_constructor_rejects_invalid_parameters",
  "tests/test_strategy_load_hours_fb.py::TestLoadHoursStrategyInput::test_LoadHoursStrategy_input",
  "tests/test_strategy_load_hours_fb.py::test_calculate_daily_energy_req",
  "tests/test_strategy_load_hours_fb.py::test_activate_event_populates_energy_requirement",
  "tests/test_strategy_load_hours_fb.py::test_device_accepts_offer",
  "tests/test_strategy_load_hours_fb.py::test_event_market_cycle",
  "tests/test_strategy_load_hours_fb.py::test_event_market_cycle_resets_energy_requirement",
  "tests/test_strategy_load_hours_fb.py::test_event_tick",
  "tests/test_strategy_load_hours_fb.py::test_event_tick_with_partial_offer",
  "tests/test_strategy_load_hours_fb.py::test_load_hours_constructor_rejects_incorrect_hrs_of_day",
  "tests/test_strategy_load_hours_fb.py::test_device_operating_hours_deduction_with_partial_trade",
  "tests/test_strategy_load_hours_fb.py::test_event_bid_traded_does_not_remove_bid_for_partial_trade[False]",
  "tests/test_strategy_load_hours_fb.py::test_event_bid_traded_does_not_remove_bid_for_partial_trade[True]",
  "tests/test_strategy_load_hours_fb.py::test_event_bid_traded_removes_bid_from_pending_if_energy_req_0",
  "tests/test_strategy_load_hours_fb.py::test_balancing_offers_are_not_created_if_device_not_in_registry",
  "tests/test_strategy_load_hours_fb.py::test_balancing_offers_are_created_if_device_in_registry",
  "tests/test_strategy_pv.py::testing_activation",
  "tests/test_strategy_pv.py::testing_event_tick",
  "tests/test_strategy_pv.py::testing_decrease_offer_price",
  "tests/test_strategy_pv.py::test_same_slot_price_drop_does_not_reduce_price_below_threshold",
  "tests/test_strategy_pv.py::testing_event_trade",
  "tests/test_strategy_pv.py::testing_trigger_risk",
  "tests/test_strategy_pv.py::testing_produced_energy_forecast_real_data",
  "tests/test_strategy_pv.py::test_does_not_offer_sold_energy_again",
  "tests/test_strategy_pv.py::test_pv_constructor_rejects_incorrect_parameters",
  "tests/test_strategy_pv.py::testing_low_risk",
  "tests/test_strategy_pv.py::testing_high_risk",
  "tests/test_strategy_pv.py::testing_number_of_pv_sell_offers",
  "tests/test_strategy_pvpredefined.py::test_activation",
  "tests/test_strategy_pvpredefined.py::testing_decrease_offer_price",
  "tests/test_strategy_pvpredefined.py::testing_event_trade",
  "tests/test_strategy_pvpredefined.py::testing_trigger_risk",
  "tests/test_strategy_pvpredefined.py::testing_produced_energy_forecast_real_data",
  "tests/test_strategy_pvpredefined.py::test_does_not_offer_sold_energy_again",
  "tests/test_strategy_pvpredefined.py::test_power_profiles",
  "tests/test_strategy_storage.py::test_if_storage_buys_cheap_energy",
  "tests/test_strategy_storage.py::test_if_storage_doesnt_buy_30ct",
  "tests/test_strategy_storage.py::test_if_storage_doesnt_buy_above_break_even_point",
  "tests/test_strategy_storage.py::test_if_storage_doesnt_buy_too_expensive",
  "tests/test_strategy_storage.py::test_if_storage_buys_below_break_even",
  "tests/test_strategy_storage.py::test_if_storage_pays_respect_to_capacity_limits",
  "tests/test_strategy_storage.py::test_if_storage_max_sell_rate_is_one_unit_less_than_market_maker_rate",
  "tests/test_strategy_storage.py::test_if_storage_handles_capacity_correctly",
  "tests/test_strategy_storage.py::test_if_trades_are_handled_correctly",
  "tests/test_strategy_storage.py::test_sell_energy_function",
  "tests/test_strategy_storage.py::test_calculate_initial_sell_energy_rate_lower_bound",
  "tests/test_strategy_storage.py::test_calculate_initial_sell_energy_rate_upper_bound",
  "tests/test_strategy_storage.py::test_calculate_risk_factor[10.0]",
  "tests/test_strategy_storage.py::test_calculate_risk_factor[25.0]",
  "tests/test_strategy_storage.py::test_calculate_risk_factor[95.0]",
  "tests/test_strategy_storage.py::test_calculate_energy_amount_to_sell_respects_max_power",
  "tests/test_strategy_storage.py::test_calculate_energy_amount_to_sell_respects_min_allowed_soc",
  "tests/test_strategy_storage.py::test_clamp_energy_to_buy",
  "tests/test_strategy_storage.py::test_sell_energy_function_with_stored_capacity",
  "tests/test_strategy_storage.py::test_first_market_cycle_with_initial_capacity",
  "tests/test_strategy_storage.py::test_initial_charge",
  "tests/test_strategy_storage.py::test_storage_constructor_rejects_incorrect_parameters",
  "tests/test_strategy_storage.py::test_free_storage_calculation_takes_into_account_storage_capacity",
  "tests/test_strategy_storage.py::test_storage_buys_partial_offer_and_respecting_battery_power",
  "tests/test_strategy_storage.py::test_storage_populates_break_even_profile_correctly",
  "tests/test_strategy_storage.py::test_storage_capacity_dependant_sell_rate",
  "tests/test_strategy_storage.py::test_storage_only_buys_and_sells_in_the_power_limit",
  "tests/test_strategy_storage.py::test_balancing_offers_are_not_created_if_device_not_in_registry",
  "tests/test_strategy_storage.py::test_balancing_offers_are_created_if_device_in_registry",
  "tests/test_unmatched_loads.py::TestUnmatchedLoad::test_export_unmatched_loads_is_reported_correctly_for_all_loads_matched",
  "tests/test_unmatched_loads.py::TestUnmatchedLoad::test_export_unmatched_loads_is_reported_correctly_for_all_loads_unmatched",
  "tests/test_unmatched_loads.py::TestUnmatchedLoad::test_export_unmatched_loads_is_reported_correctly_for_half_loads_unmatched",
  "tests/test_unmatched_loads.py::TestUnmatchedLoad::test_export_unmatched_loads_is_reported_correctly_for_predefined_load_strategy",
  "tests/test_unmatched_loads.py::TestUnmatchedLoad::test_export_unmatched_loads_reports_cell_tower_areas",
  "tests/test_util.py::test_validate_all_setup_scenarios_are_available",
  "tests/contracts/test_bc_markets.py::test_approver",
  "tests/contracts/test_bc_markets.py::test_globallyApprove",
  "tests/contracts/test_bc_markets.py::test_offer",
  "tests/contracts/test_bc_markets.py::test_offer_fail",
  "tests/contracts/test_bc_markets.py::test_cancel",
  "tests/contracts/test_bc_markets.py::test_trade",
  "tests/contracts/test_bc_markets.py::test_partial_trade",
  "tests/contracts/test_bc_markets.py::test_seller_trade_fail",
  "tests/contracts/test_bc_markets.py::test_offer_price_negative",
  "tests/contracts/test_bc_markets.py::test_offer_price_zero",
  "tests/contracts/test_bc_markets.py::test_multiple_markets",
  "tests/contracts/test_bc_markets.py::test_trade_fail_afterinterval",
  "tests/contracts/test_bc_markets.py::test_trade_fail_on_clearingTransfer_fail",
  "tests/contracts/test_ioutoken.py::test_balanceOf",
  "tests/contracts/test_ioutoken.py::test_transfer",
  "tests/contracts/test_ioutoken.py::test_transfer_negative_balance",
  "tests/contracts/test_ioutoken.py::test_overflows",
  "tests/contracts/test_ioutoken.py::test_approve_allowance",
  "tests/contracts/test_ioutoken.py::test_transferFrom"
]